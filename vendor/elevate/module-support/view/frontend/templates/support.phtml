

<style>
    main#maincontent {
    max-width: 100%;
    padding: 0;
}
    body {
        font: message-box;
    }
    h1 {
        font-size: 1em;
    }
    table {
        border-collapse: collapse;
    }
    td {
        border-bottom: 1pt solid gray;
        padding: calc(1.25em - 0.5pt) 0;
        padding-left: 1ex;
    }
    td:first-child {
        padding-left: 0;
    }
    
    
    @media only screen and (max-width: 760px) {
    #cemail {
        min-width: initial !important;
        display:block;
            width: 100%;
    margin-bottom: 10px !important;
    }
    #clicksub{
    display:block;}
}
.form_lab{
margin-top:30px;
}
.form-style-box{
padding: 22px !important; margin: 0;
    color: black;
    margin-right: 1%;

}
    </style>

<div class="container2" style="
    background: linear-gradient(#1f8dd6, #1f8bd3);
    color: white;
    text-align: center;
    padding: 40px;   order:1
">
   <div> 
    <a id="hdr-logo" href="/" title="<?php echo $this->getLogoAlt() ?>" style="margin-bottom:40px;">
<img class="img-responsive" src="<?php echo $this->getLogoSrc() ?>" alt="<?php echo $this->getLogoAlt() ?>" style="
    filter: brightness(0) invert(1);
    margin: 0 auto;   height: 100px;

">
</a>


  <div id="formpost">  

<div class="container" style="    max-width: 800px; margin-top:40px; text-align:left;">
<div class="row">

<div class="col-md-12">
     <input id="cemail" type="text" placeholder="Enter your email address ..." style="padding: 22px;margin: 0;min-width: 403px;
    color: black;
    margin-right: 1%;
">
</div>
<div class="col-md-12">
<label class="form_lab">Include the web link to the page with the issue.</label>
     <input type="text" id="form_link" name="link" placeholder="E.g. https://www.example.com/product_page.html" class="form-style-box">
</div>
  <div class="col-md-12">
  <label class="form_lab">Please describe the problem in as much detail as possible.</label>
    <textarea id="form_description" name="description"></textarea>
  </div> 
   
  <div class="col-md-12"> 
    <span id="clicksub" class="hideit" style="
    cursor: pointer;
    background-color: #47b575;
    border: none;
    padding: 15px;
    margin: 0;
    display: block;
    margin-top: 20px;
    margin-bottom: 20px;
    text-align: center;
    text-transform: uppercase;
    font-weight: bold;
"> Submit   </span>
   </div>
</div>
 <p style="margin:0 auto; display:block;  max-width: 800px;text-align:center;">You will be sending us the following information about your browser and device to help us fix any on site issues. We appreciate your help, and your data will be held
    no longer than 30 days, and only used for the the purpose of fixing the issues you have been experiencing.
    </p>
</div>
</div>
    
     
    </div>
       
<!--
       <form action="/support/report/submit">
  First name:<br>
  <input type="text" name="firstname" value="Mickey"><br>
  Last name:<br>
  <input type="text" name="lastname" value="Mouse"><br><br>
  <input type="submit" value="Submit">
</form>
-->
       
         <script type="text/javascript">
                            
  function validateEmail(email) {
  var re = /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
  return re.test(email);
}

      jQuery('#clicksub').click(function () {
       var email = jQuery('#cemail').val();
          var link = jQuery('#form_link').val();
             var description = jQuery('#form_description').val();
         if (validateEmail(email)) {
   
  } else {
  alert("Your email address is invalid");
   return false;
  } 
          url = '/support/report/submit';
          var samtwo = sampleReport;
          samtwo.email = email;  
            samtwo.link = link;  
              samtwo.description = description;  
          //console.log(searchbuttonwidth);
         jQuery.ajax({
            url: url,
            dataType: 'json',
            type: 'post',
            data: samtwo,
            success: function (data) {

             var output = '<div><h1 style="color: white;margin-top: 25px;">Thankyou for your time, we will look at this issue soon and may get in touch if we have any questions.</h1><p>Your Unique reference is: '+data.hash+'</p></div>';

             jQuery("#formpost").html(output);
              

              }//end success
      
            });
          
          });
  


     </script>    
    
   </div>
    </div>
    <style>
      .hideme{
      display:none;
      }
    </style>
<div class="container" style="    max-width: 800px;order:2">
<div class="row">

<div class="col-md-12" style="text-align:center;">

    <h2 style="
    text-align: center;
    margin-top: 20px;
">
        You are using <span class="hideit hideme">{{browser.name}} {{browser.majorVersion}}.</span>
    </h2>
    <h3 style="
    margin-top: 45px;
">
        Browser Details
    </h3>
    <p>
        We've detected the following details about your browser.
    </p>
    <table class="table">
        <tr>
            <td>
                Operating System
            </td>
            <td>
                <span class="hideit hideme">{{os.name}} {{os.version}}</span>
            </td>
        </tr>
        <tr>
            <td>
                IP Address
            </td>
            <td>
                <span class="hideit hideme"><?php echo $_SERVER['REMOTE_ADDR']; ?></span>
            </td>
        </tr>                   
        <tr>
            <td>
                JavaScript Enabled
            </td>
            <td>
                <span class="hideit hideme">{{scripts}}</span>
            </td>
        </tr>
        <tr>
            <td>
                Cookies Enabled
            </td>
            <td>
                <span class="hideit hideme">{{cookies}}</span>
            </td>
        </tr>
        <tr>
            <td>
                Flash Version
            </td>
            <td>
                <span class="hideit hideme">{{flash.version}}</span>
            </td>
        </tr>
        <tr>
            <td>
                Java Version
            </td>
            <td>
                <span class="hideit hideme">{{java.version}}</span>
            </td>
        </tr>
        <tr>
            <td>
                WebSockets Supported
            </td>
            <td>
                <span class="hideit hideme">{{websockets}}</span>
            </td>
        </tr>
        <tr>
            <td>
                Browser Size
            </td>
            <td>
                <span class="hideit hideme">{{viewport.width}} x {{viewport.height}}</span>
            </td>
        </tr>
        <tr>
            <td>
                Screen Size
            </td>
            <td>
                <span class="hideit hideme">{{screen.width}} x {{screen.height}} @ {{screen.dppx}}x </span>
            </td>
        </tr>
        <tr>
            <td>
                Color Depth
            </td>
            <td>
                <span class="hideit hideme">{{screen.colors}}</span>
            </td>
        </tr>
    </table>
    <p class="user-agent">
        Your full user agent string is:<br>
        <span class="hideit hideme">{{userAgent}}</span>
    </p>
    <script>
    /*
 * Report browser settings like whatsmybrowser.org
 * Inspired by
 * http://stackoverflow.com/questions/9514179/how-to-find-the-operating-system-version-using-javascript
 */
(function () {
    "use strict";

    var extractDataFromClient, definePropertySupported;

    extractDataFromClient = function (userAgent) {
        var report, match, uuid;

        userAgent = userAgent || navigator.userAgent;

        // initialize object to store results
        report = {
            "browser": {
                "name": null,
                "version": null
            },
            "cookies": null,
            "flash": {
                "version": null
            },
            "ip": null,
            "java": {
                "version": null
            },
            "os": {
                "name": null,
                "version": null
            },
            "screen": {
                "colors": null,
                "dppx": null,
                "height": null,
                "width": null
            },
            "scripts": true,
            "userAgent": userAgent,
            "viewport": {
                "height": null,
                "layout": {
                    "height": null,
                    "width": null
                },
                "width": null,
                "zoom": null
            },
            "websockets": null
        };


        // extract browser name from user agent
        if (userAgent.indexOf("Trident") >= 0 || userAgent.indexOf("MSIE") >= 0) {
            if (userAgent.indexOf("Mobile") >= 0) {
                report.browser.name = "IE Mobile";
            } else {
                report.browser.name = "Internet Explorer";
            }
        }

        if (userAgent.indexOf("Firefox") >= 0 && userAgent.indexOf("Seamonkey") === -1) {
            if (userAgent.indexOf("Android") >= 0) {
                report.browser.name = "Firefox for Android";
            } else {
                report.browser.name = "Firefox";
            }
        }

        if (userAgent.indexOf("Safari") >= 0 && userAgent.indexOf("Chrome") === -1 && userAgent.indexOf("Chromium") === -1 && userAgent.indexOf("Android") === -1) {
            if (userAgent.indexOf("CriOS") >= 0) {
                report.browser.name = "Chrome for iOS";
            } else if (userAgent.indexOf("FxiOS") >= 0) {
                report.browser.name = "Firefox for iOS";
            } else {
                report.browser.name = "Safari";
            }
        }

        if (userAgent.indexOf("Chrome") >= 0) {
            if (userAgent.match(/\bChrome\/[.0-9]* Mobile\b/)) {
                if (userAgent.match(/\bVersion\/\d+\.\d+\b/) || userAgent.match(/\bwv\b/)) {
                    report.browser.name = "WebView on Android";
                } else {
                    report.browser.name = "Chrome for Android";
                }
            } else {
                report.browser.name = "Chrome";
            }
        }

        if (userAgent.indexOf("Android") >= 0 && userAgent.indexOf("Chrome") === -1 && userAgent.indexOf("Chromium") === -1 && userAgent.indexOf("Trident") === -1 && userAgent.indexOf("Firefox") === -1) {
            report.browser.name = "Android Browser";
        }

        if (userAgent.indexOf("Edge") >= 0) {
            report.browser.name = "Edge";
        }

        if (userAgent.indexOf("UCBrowser") >= 0) {
            report.browser.name = "UC Browser for Android";
        }

        if (userAgent.indexOf("SamsungBrowser") >= 0) {
            report.browser.name = "Samsung Internet";
        }

        if (userAgent.indexOf("OPR") >= 0 || userAgent.indexOf("Opera") >= 0) {
            if (userAgent.indexOf("Opera Mini") >= 0) {
                report.browser.name = "Opera Mini";
            } else if (userAgent.indexOf("Opera Mobi") >= 0 || userAgent.indexOf("Opera Tablet") >= 0 || userAgent.indexOf("Mobile") >= 0) {
                report.browser.name = "Opera Mobile";
            } else {
                report.browser.name = "Opera";
            }
        }

        if (userAgent.indexOf("BB10") >= 0 || userAgent.indexOf("PlayBook") >= 0 || userAgent.indexOf("BlackBerry") >= 0) {
            report.browser.name = "BlackBerry";
        }


        // extract browser version number from user agent
        match = null;

        switch (report.browser.name) {
        case "Chrome":
        case "Chrome for Android":
        case "WebView on Android":
            match = userAgent.match(/Chrome\/((\d+\.)+\d+)/);
            break;
        case "Firefox":
        case "Firefox for Android":
            match = userAgent.match(/Firefox\/((\d+\.)+\d+)/);
            break;
        case "Firefox for iOS":
            match = userAgent.match(/FxiOS\/((\d+\.)+\d+)/);
            break;
        case "Edge":
        case "Internet Explorer":
        case "IE Mobile":

            if (userAgent.indexOf("Edge") >= 0) {
                match = userAgent.match(/Edge\/((\d+\.)+\d+)/);
            } else if (userAgent.indexOf("rv:11") >= 0) {
                match = userAgent.match(/rv:((\d+\.)+\d+)/);
            } else if (userAgent.indexOf("MSIE") >= 0) {
                match = userAgent.match(/MSIE\ ((\d+\.)+\d+)/);
            }

            break;
        case "Safari":
            match = userAgent.match(/Version\/((\d+\.)+\d+)/);
            break;
        case "Android Browser":
            match = userAgent.match(/Android ((\d+\.)+\d+)/);
            break;
        case "UC Browser for Android":
            match = userAgent.match(/UCBrowser\/((\d+\.)+\d+)/);
            break;
        case "Samsung Internet":
            match = userAgent.match(/SamsungBrowser\/((\d+\.)+\d+)/);
            break;
        case "Opera Mini":
            match = userAgent.match(/Opera Mini\/((\d+\.)+\d+)/);
            break;
        case "Opera":
            if (userAgent.match(/OPR/)) {
                match = userAgent.match(/OPR\/((\d+\.)+\d+)/);
            } else if (userAgent.match(/Version/)) {
                match = userAgent.match(/Version\/((\d+\.)+\d+)/);
            } else {
                match = userAgent.match(/Opera\/((\d+\.)+\d+)/);
            }
            break;
        case "BlackBerry":
            match = userAgent.match(/Version\/((\d+\.)+\d+)/);
            break;
        default:
            match = userAgent.match(/\/((\d+\.)+\d+)$/);
            break;
        }

        if (match && match[1]) {
            report.browser.version = match[1];
        }

        // pull in browser window size from the visual viewport
        report.viewport.width = window.innerWidth || document.documentElement.clientWidth;
        report.viewport.height = window.innerHeight || document.documentElement.clientHeight;


        /*
         * test if Object.defineProperty function is fully supported
         */
        try {
            Object.defineProperty({}, "x", {});
            definePropertySupported = true;
        } catch (e) {
            definePropertySupported = false;
        }


        /*
         * helper function to safely log warning messages
         */
        /* eslint-disable no-console */
        function warning(msg) {
            if (window.console) {
                if (console.warn) {
                    console.warn(msg);
                } else {
                    console.log(msg);
                }
            }
        }
        /* eslint-enable no-console */

        // deprecate report.browser.size
        if (definePropertySupported) {
            Object.defineProperty(report.browser, "size", {
                get: function () {
                    warning("browser.size is deprecated; use viewport.width and viewport.height");
                    return report.viewport.width + " x " + report.viewport.height;
                }
            });
        }

        // pull in raw values for layout viewport
        report.viewport.layout.width = document.documentElement.clientWidth;
        report.viewport.layout.height = document.documentElement.clientHeight;

        // define viewport zoom property
        report.viewport.zoom = report.viewport.layout.width / report.viewport.width;


        // are cookies enabled
        // can't trust this value (Microsoft Edge lies)
        // report.cookies = !!navigator.cookieEnabled;

        // truely check if cookies are enabled
        // generate UUID for cookie name
        uuid = "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx";
        uuid = uuid.replace(/[xy]/g, function (c) {
            var r, v;

            r = Math.random() * 16 | 0;
            v = c === "x"
                ? r
                : (r & 0x3 | 0x8);

            return v.toString(16);
        });
        document.cookie = uuid;

        if (document.cookie.indexOf(uuid) >= 0) {
            report.cookies = true;
        } else {
            report.cookies = false;
        }
        // delete temporoary cookie
        document.cookie = uuid + "=; expires=Thu, 01 Jan 1970 00:00:01 GMT;";


        // check plugins
        (function (plugins) {
            var i, l, plugin;

            if (plugins) {
                l = plugins.length;

                for (i = 0; i < l; i += 1) {
                    plugin = plugins.item(i);

                    // what version of Adobe Flash
                    if (plugin.name.indexOf("Flash") >= 0) {
                        match = plugin.description.match(/\b((\d+\.)+\d+)\b/);
                        if (match && match[1]) {
                            report.flash.version = match[1];
                        }
                    }

                    // what version of Java
                    if (plugin.name.indexOf("Java") >= 0) {
                        match = plugin.description.match(/\b((\d+\.)+\d+)\b/);
                        if (match && match[1]) {
                            report.java.version = match[1];
                        }
                    }
                }
            }
        }(navigator.plugins));


        // extract operating system name from user agent
        if (userAgent.indexOf("Windows") >= 0) {
            if (userAgent.indexOf("Windows Phone") >= 0) {
                report.os.name = "Windows Phone";
            } else {
                report.os.name = "Windows";
            }
        }

        if (userAgent.indexOf("OS X") >= 0 && userAgent.indexOf("Android") === -1) {
            report.os.name = "OS X";
        }

        if (userAgent.indexOf("Linux") >= 0) {
            report.os.name = "Linux";
        }

        if (userAgent.indexOf("like Mac OS X") >= 0) {
            report.os.name = "iOS";
        }

        if ((userAgent.indexOf("Android") >= 0 || userAgent.indexOf("Adr") >= 0) && userAgent.indexOf("Windows Phone") === -1) {
            report.os.name = "Android";
        }

        if (userAgent.indexOf("BB10") >= 0) {
            report.os.name = "BlackBerry";
        }

        if (userAgent.indexOf("RIM Tablet OS") >= 0) {
            report.os.name = "BlackBerry Tablet OS";
        }

        if (userAgent.indexOf("BlackBerry") >= 0) {
            report.os.name = "BlackBerryOS";
        }


        // extract operating system version from user agent
        match = null;

        switch (report.os.name) {
        case "Windows":
        case "Windows Phone":
            if (userAgent.indexOf("Win16") >= 0) {
                report.os.version = "3.1.1";
            } else if (userAgent.indexOf("Windows CE") >= 0) {
                report.os.version = "CE";
            } else if (userAgent.indexOf("Windows 95") >= 0) {
                report.os.version = "95";
            } else if (userAgent.indexOf("Windows 98") >= 0) {
                if (userAgent.indexOf("Windows 98; Win 9x 4.90") >= 0) {
                    report.os.version = "Millennium Edition";
                } else {
                    report.os.version = "98";
                }
            } else {
                match = userAgent.match(/Win(?:dows)?(?: Phone)?[\ _]?(?:(?:NT|9x)\ )?((?:(\d+\.)*\d+)|XP|ME|CE)\b/);

                if (match && match[1]) {
                    switch (match[1]) {
                    case "6.4":
                        match[1] = "10.0";
                        break;
                    case "6.3":
                        match[1] = "8.1";
                        break;
                    case "6.2":
                        match[1] = "8";
                        break;
                    case "6.1":
                        match[1] = "7";
                        break;
                    case "6.0":
                        match[1] = "Vista";
                        break;
                    case "5.2":
                        match[1] = "Server 2003";
                        break;
                    case "5.1":
                        match[1] = "XP";
                        break;
                    case "5.01":
                        match[1] = "2000 SP1";
                        break;
                    case "5.0":
                        match[1] = "2000";
                        break;
                    case "4.0":
                        match[1] = "4.0";
                        break;
                    default:
                        // nothing
                        break;
                    }
                }
            }
            break;
        case "OS X":
            match = userAgent.match(/OS\ X\ ((\d+[._])+\d+)\b/);
            break;
        case "Linux":
            // linux user agent strings do not usually include the version
            report.os.version = null;
            break;
        case "iOS":
            match = userAgent.match(/OS\ ((\d+[._])+\d+)\ like\ Mac\ OS\ X/);
            break;
        case "Android":
            match = userAgent.match(/(?:Android|Adr)\ ((\d+[._])+\d+)/);
            break;
        case "BlackBerry":
        case "BlackBerryOS":
            match = userAgent.match(/Version\/((\d+\.)+\d+)/);
            break;
        case "BlackBerry Tablet OS":
            match = userAgent.match(/RIM Tablet OS ((\d+\.)+\d+)/);
            break;
        default:
            // no good default behavior
            report.os.version = null;
            break;
        }

        if (match && match[1]) {

            // replace underscores in version number with periods
            match[1] = match[1].replace(/_/g, ".");
            report.os.version = match[1];
        }


        // pull in screen info from W3C standard properties
        report.screen.width = screen.width;
        report.screen.height = screen.height;
        report.screen.colors = screen.colorDepth;
        if (window.devicePixelRatio && !isNaN(window.devicePixelRatio)) {
            report.screen.dppx = window.devicePixelRatio;
        } else {
            report.screen.dppx = 1;
        }

        // deprecate report.screen.size
        if (definePropertySupported) {
            Object.defineProperty(report.screen, "size", {
                get: function () {
                    warning("screen.size is deprecated; use screen.width and screen.height");
                    return report.screen.width + " x " + report.screen.height;
                }
            });
        }

        // deprecate report.screen.resolution
        if (definePropertySupported) {
            Object.defineProperty(report.screen, "resolution", {
                get: function () {
                    warning("screen.resolution is deprecated; multiply screen.width and screen.height by screen.dppx");
                    return (report.screen.dppx * report.screen.width) + " x " + (report.screen.dppx * report.screen.height);
                }
            });
        }


        // are web sockets supported
        report.websockets = !!window.WebSocket;


        // preferred language(s) for displaying pages
        report.lang = navigator.languages || navigator.language;


        // local date, time, and time zone
        report.timestamp = (new Date()).toString();


        return report;
    };


    /*
     * asynchronous version includes the remote client IP address
     * uses ipify.org API
     */
    window.browserReport = window.browserReport || function (callback) {
        var report, newScriptTag, existingScriptTag;

        report = extractDataFromClient();

      callback(null, report);

    };


    /*
     * synchronous version returns report immediately
     * but does not include the remote client IP address
     */
    window.browserReportSync = window.browserReportSync || function (userAgent) {
        return extractDataFromClient(userAgent);
    };
}());
</script>
    <script>
    /*
     * pure JS implementation of forEach
     * because I hate not having it
     */
    // Production steps of ECMA-262, Edition 5, 15.4.4.18
    // Reference: http://es5.github.io/#x15.4.4.18
    if (!Array.prototype.forEach) {

        Array.prototype.forEach = function(callback, thisArg) {

            var T, k;
       
            if (this == null) {
                throw new TypeError(' this is null or not defined');
            }

            // 1. Let O be the result of calling ToObject passing the |this| value as the argument.
            var O = Object(this);

            // 2. Let lenValue be the result of calling the Get internal method of O with the argument "length".
            // 3. Let len be ToUint32(lenValue).
            var len = O.length >>> 0;

            // 4. If IsCallable(callback) is false, throw a TypeError exception.
            // See: http://es5.github.com/#x9.11
            if (typeof callback !== "function") {
                throw new TypeError(callback + ' is not a function');
            }

            // 5. If thisArg was supplied, let T be thisArg; else let T be undefined.
            if (arguments.length > 1) {
                T = thisArg;
            }

            // 6. Let k be 0
            k = 0;

            // 7. Repeat, while k less than len
            while (k < len) {

                var kValue;

                // a. Let Pk be ToString(k).
                //     This is implicit for LHS operands of the in operator
                // b. Let kPresent be the result of calling the HasProperty internal method of O with argument Pk.
                //     This step can be combined with c
                // c. If kPresent is true, then
                if (k in O) {

                    // i. Let kValue be the result of calling the Get internal method of O with argument Pk.
                    kValue = O[k];

                    // ii. Call the Call internal method of callback with T as the this value and
                    // argument list containing kValue, k, and O.
                    callback.call(T, kValue, k, O);
                }
                // d. Increase k by 1.
                k++;
            }
            // 8. return undefined
        };
    }
    </script>
    <script type="text/javascript">
        var sampleReport;

        window.performance && window.performance.mark('browserReportStart');
        var sampleReport = browserReportSync();
        if (window.performance) {
            window.performance.mark('browserReportEnd');
            window.performance.measure('browserReportComplete', 'browserReportStart', 'browserReportEnd');
        //    console.log(window.performance.getEntriesByName('browserReportComplete')[0]);
        }
          window.callMe = function(){
           jQuery('.hideit').removeClass('.hideme');
          }
        browserReport(function (err, report) {
            "use strict";

            var h2, text, tds, p;

            if (err) {
                throw err;
            }

            // save to global variable for inspection by developers
            sampleReport = report;
                 window.callMe();    jQuery('.hideit').removeClass('hideme');
            // add some custom data to the report
            if (report.browser.version) {
                report.browser.majorVersion = report.browser.version.split(".")[0];
            }

            // update h2 with browser name and major version
            if (document.querySelector) {
                h2 = document.querySelector("h2");
            } else {
                h2 = document.getElementsByTagName("h2")[0];
            }
            text = h2.innerHTML;
            text = text.replace("{{browser.name}}", report.browser.name);
            text = text.replace("{{browser.majorVersion}}", report.browser.majorVersion);
            h2.innerHTML = text;

            // update table cells with browser details
            if (document.querySelectorAll) {
                tds = document.querySelectorAll("td");
            } else {
                tds = document.getElementsByTagName("td");
            }
            
            
            
            Array.prototype.forEach.call(tds, function (td) {
        
                var t, matches;

                t = td.innerHTML;
                matches = t.match(/\{\{[\w.]+?\}\}/g);

                if (matches) {
                    matches.forEach(function (match) {
                        var key, k1, k2, v;

                        key = match.slice(2, -2);
                        k1 = key.split(".")[0];
                        k2 = key.split(".")[1];

                        if (k1 && k2) {
                            v = report[k1][k2] || "n/a";
                        } else {
                            v = report[k1] || "n/a";
                        }

                        if (v === true) {
                            v = "Yes";
                        }
                        if (v === false) {
                            v = "No";
                        }

                        t = t.replace(match, v);
                    });
                }
                td.innerHTML = t;
            });

            // update user-agent element with full user agent string
            if (document.querySelector) {
                p = document.querySelector("p.user-agent");
            } else {
                var elements = document.getElementsByTagName("p");
                Array.prototype.forEach.call(elements, function (element) {
                    if (element.className.match("user-agent")) {
                        p = element;
                    }
                });
            }
            p.innerHTML = p.innerHTML.replace("{{userAgent}}", report.userAgent);
        });
    </script>
    </div>
    </div>
    </div>

// sass-lint:disable space-around-operator
// sass-lint:disable no-vendor-prefixes
// sass-lint:disable no-misspelled-properties
// stylelint-disable length-zero-no-unit
// stylelint-disable number-leading-zero


@mixin clearActionStyles($font-size: null, $color: null, $border: null, $background: null) {
    @if $font-size == null {
        font-size: initial;
    } @else {
        font-size: $font-size;
    }
    @if $color == null {
        color: initial;
    } @else {
        color: $color;
    }

    @if $background == null {
        background-color: unset;
    } @else {
        background-color: $background;
    }

    @if $border == null {
        border: initial;
    } @else {
        border: $border;
    }


    display: initial;
    font-weight: initial;

    text-align: initial;
    vertical-align: unset;
    cursor: initial;
    -webkit-user-select: initial;
    -moz-user-select: initial;
    -ms-user-select: initial;

    user-select: initial;


    padding: initial;

    line-height: initial;
    border-radius: initial;
    -webkit-transition: initial;
    transition: initial;
}

// If Passed Variable is False, then output false, else output string

@function ev-false-check($var, $functionname, $value) {

    @if $var == false {
        @return false;
    } @else {
        @return #{$functionname}($var, $value);
    }
}



//
@mixin ev-color-output($color) {
    @if $color != false {
        @if $ev-reduce-coloroverides == 1 {

            @if $color != $body-color {
                @include m2-lib-css(color, $color);
            }
            // Other wise no output;
        } @else {
            @include m2-lib-css(color, $color);
        }
    }

}

// Compares Passed Font Size to Base Font Size
// If the same it won't output, unless force_output is 0
// If use_rfs is set to 1 it will use the rfs font-size mixin for scaling

@mixin ev-fontsize-output($fontsize: $font-size-base, $force-output: 0, $use-rfs: 1) {
    @if $fontsize != $font-size-base {
        @if $use-rfs == 1 {
            @include rfs($fontsize);
        } @else {
            font-size: $fontsize;
        }
    }
}

// Checks Output -
// if Var 1 is false, no output
// if Var 1 is set, and var 2 is not null then values will be compared and var1 only output if values are different
// if Var 1 is set, and var 2 is null, var 1 will be output.
// same goes for 3 and 4 only will ouput var1 if all are not the same - useful for breakpoints
@mixin ev-check-output($property, $var1, $var2: null, $var3: null, $var4: null) {
    @if $var1 != false {
        @if $var2 == null {
            #{$property}: $var1;
        } @else if $var3 == null {
            @if $var1 != $var2 {
                #{$property}: $var1;
            }
        } @else if $var4 == null {
            @if $var1 != $var2 and $var1 != $var3 {
                #{$property}: $var1;
            }
        } @else {
            // All 4 are set
            @if $var1 != $var2 and $var1 != $var3 and $var1 != $var4 {
                #{$property}: $var1;
            }
        }


    }
}

// Checks Output -
// if Var 1 is false, no output
// if Var 1 is set, and var 2 is not null then values will be compared and var1 only output if values are different
// if Var 1 is set, and var 2 is null, var 1 will be output.
// same goes for 3 and 4 only will ouput var1 if all are not the same - useful for breakpoints
@mixin co($property, $var1, $var2: null, $var3: null, $var4: null, $var5: null) {

    @if $var1 != false {
        @if $var2 == null {
            @if $property == 'border-radius' {
                @include rj-border-radius($var1);
            } @else {
                #{$property}: $var1;
            }

        } @else if $var3 == null {
            @if $var1 != $var2 {
                @if $property == 'border-radius' {
                    @include rj-border-radius($var1);
                } @else {
                    #{$property}: $var1;
                }
            }
        } @else if $var4 == null {
            @if $var1 != $var2 and $var1 != $var3 {
                @if $property == 'border-radius' {
                    @include rj-border-radius($var1);
                } @else {
                    #{$property}: $var1;
                }
            }
        } @else if $var5 == null {
            // All 5 are set
            @if $var1 != $var2 and $var1 != $var3 and $var1 != $var4 {
                @if $property == "border-radius" {
                    @include rj-border-radius($var1);
                } @else {
                    #{$property}: $var1;
                }
            }
        } @else {
            // All 6 are set
            @if $var1 != $var2 and $var1 != $var3 and $var1 != $var4 and $var1 != $var5 {
                @if $property == "border-radius" {
                    @include rj-border-radius($var1);
                } @else {
                    #{$property}: $var1;
                }
            }
        }
    }
}


// Checks Output -
// if Var 1 is 0 no output
@mixin co-notzero($property, $var1) {
    @if $var1 != 0 {
        #{$property}: $var1;
    }
}

// Checks Output -
// if Var 1 is 0 no output
@mixin ev-check-output-notzero($property, $var1) {
    @if $var1 != 0 {
        #{$property}: $var1;
    }
}

// Button sizes
@mixin ev-button-size($padding-y, $padding-x, $font-size, $line-height, $border-radius) {
    @include co(padding, $padding-y $padding-x);
    @include font-size($font-size);
    line-height: $line-height;
    @include border-radius($border-radius);
}


@mixin m2-lib-css(
    $-property,
    $-value,
    $-prefix: 0
) {
    @if $-value == 0 {
        $-value: strip-unit($-value);
    }

    @if $-value != '' and $-value != false {
        @if type-of($-value) == list {
            $-isFalse: false;
            @each $-item in $-value {
                @if $-item == false {
                    $-isFalse: true;
                }
            }
            @if $-isFalse == false {
                #{$-property}: $-value;
            }
        } @else {
            #{$-property}: $-value;
        }
    }
}


@mixin vendor-prefix($name, $value) {
    @each $vendor in ('-webkit-', '-moz-', '-ms-', '-o-', '') {
        #{$vendor}#{$name}: #{$value};
    }
}

@mixin rj-transform-origin($origin) {
    @include vendor-prefix('transform-origin', $origin);
}

@mixin rj-link($color) {
    color: $color;
    &:visited {
        color: $color;
    }
    &[href] {
        &:hover,
        &:focus {
            color: darken($color, 15%);
        }
    }

}


@mixin ev-border-radius($border-position: all, $border-radius: 5px) {
    @if $border-position == 'all' {
        border-radius: $border-radius;
    }
    @if $border-position == 'top only' {
        border-top-left-radius: $border-radius;
        border-bottom-left-radius: 0;
        border-top-right-radius: $border-radius;
        border-bottom-right-radius: 0;
    }
    @if $border-position == 'bottom only' {
        border-top-left-radius: 0;
        border-bottom-left-radius: $border-radius;
        border-top-right-radius: 0;
        border-bottom-right-radius: $border-radius;
    }
    @if $border-position == 'right only' {
        border-top-left-radius: 0;
        border-bottom-left-radius: 0;
        border-top-right-radius: $border-radius;
        border-bottom-right-radius: $border-radius;
    }
    @if $border-position == 'left only' {
        border-top-left-radius: $border-radius;
        border-bottom-left-radius: $border-radius;
        border-top-right-radius: 0;
        border-bottom-right-radius: 0;
    }
}

/// Computes an exponent.
///
/// @param {string} $border-color
///  Border Color.
/// @param {integer} $border-thickness
///   Thickness of border
/// @param {string} $border-type
///  Border Type (Solid etc)
/// @param {string} $border-position
///  Position (All, Top, Left, Bottom, etc)
@mixin elevate-border($border-color: black, $border-thickness: 1px, $border-type: solid, $border-position: all) {
    $border-output: $border-thickness $border-type $border-color;





    @if $border-color == false {
        $border-output: $border-thickness $border-type;
    }


    @if $border-position == 'all' {

        border: $border-output;
    }
    @if $border-position == 'top' {
        border-top: $border-output;
    }
    @if $border-position == 'bottom' {
        border-bottom: $border-output;
    }
    @if $border-position == 'right' {
        border-right: $border-output;
    }
    @if $border-position == 'left' {
        border-left: $border-output;
    }
    @if $border-position == 'top-bottom' {
        border-top: $border-output;
        border-bottom: $border-output;
    }
    @if $border-position == 'all-but-right' {
        border-left: $border-output;
        border-top: $border-output;
        border-bottom: $border-output;
    }

}

@mixin image-2x($image, $width, $height, $contain: null, $repeat: null) {
    @media (min--moz-device-pixel-ratio: 1.3),
    (-o-min-device-pixel-ratio: 2.6/2),
    (-webkit-min-device-pixel-ratio: 1.3),
    (min-device-pixel-ratio: 1.3),
    (min-resolution: 1.3dppx) {
        // on retina, use image that's scaled by 2
        background-image: url($image);
        @if $contain != null {
            background-size: contain;
            @if $repeat != null {
                background-repeat: $repeat;
            }
        } @else {
            background-size: $width $height;
        }
    }
}

// Mixin for generating new styles
@mixin panel-heading-styles($color) {
    @include gradient-vertical($start-color: $color, $end-color: darken($color, 5%));
}

@mixin rj-scale($ratio) {
    -webkit-transform: scale($ratio);
    -moz-transform: scale($ratio);
    -ms-transform: scale($ratio);
    -o-transform: scale($ratio);
    transform: scale($ratio);
}

@mixin rj-box-sizing($box-model) {
    -webkit-box-sizing: $box-model;
    // Safari <=5 -moz-box-sizing: $box-model;
    // Firefox <=19 box-sizing: $box-model;
}

@mixin rj-opacity($opacity) {
    opacity: $opacity;
    $opacity-ie: $opacity * 100;
    filter: alpha(opacity=$opacity-ie);
    //IE8F
}

@function calculateRem($size) {
    $remSize: $size / 16px;
    @return #{$remSize}rem;
}

@mixin rj-font-size($size) {
    font-size: $size; //Fallback in px
    font-size: calculateRem($size);
}

@mixin rj-border-radius($radius) {
    -webkit-border-radius: $radius;
    border-radius: $radius;
    background-clip: padding-box; // stops bg color from leaking outside the border:
}

@mixin rj-box-shadow($top, $left, $blur, $color, $inset: false) {
    @if $inset {
        -webkit-box-shadow: inset $top $left $blur $color;
        -moz-box-shadow: inset $top $left $blur $color;
        box-shadow: inset $top $left $blur $color;
    } @else {
        -webkit-box-shadow: $top $left $blur $color;
        -moz-box-shadow: $top $left $blur $color;
        box-shadow: $top $left $blur $color;
    }
}

/// Global variables to enable or disable vendor prefixes

$prefix-for-webkit: true !default;
$prefix-for-mozilla: true !default;
$prefix-for-microsoft: true !default;
$prefix-for-opera: true !default;
$prefix-for-spec: true !default;

@mixin appearance($value) {
    @include prefixer(appearance, $value, webkit moz ms o spec);
}

// Placeholder text
// -------------------------
$placeholderText: #000 !default;
@mixin rj-placeholder($color: $placeholderText) {
    &:-moz-placeholder {
        color: $color;
    }
    &:-ms-input-placeholder {
        color: $color;
    }
    &::-webkit-input-placeholder {
        color: $color;
    }
}

@mixin prefixer($property, $value, $prefixes) {
    @each $prefix in $prefixes {
        @if $prefix == webkit {
            @if $prefix-for-webkit {
                -webkit-#{$property}: $value;
            }
        } @else if $prefix == moz {
            @if $prefix-for-mozilla {
                -moz-#{$property}: $value;
            }
        } @else if $prefix == ms {
            @if $prefix-for-microsoft {
                -ms-#{$property}: $value;
            }
        } @else if $prefix == o {
            @if $prefix-for-opera {
                -o-#{$property}: $value;
            }
        } @else if $prefix == spec {
            @if $prefix-for-spec {
                #{$property}: $value;
            }
        }
    }
}

@mixin disable-prefix-for-all() {
    $prefix-for-webkit: false !global;
    $prefix-for-mozilla: false !global;
    $prefix-for-microsoft: false !global;
    $prefix-for-opera: false !global;
    $prefix-for-spec: false !global;
}

@mixin rj-transition($args...) {
    transition: $args;
}

@mixin rj-transform($transform1, $transform2: false, $transform3: false) {
    @if $transform2 {
        transform: $transform1 $transform2;
    } @else if $transform3 {
        transform: $transform1 $transform2 $transform3;
    } @else {
        transform: $transform1;
    }
}

$rem-baseline: 10px !default;
$rem-fallback: true !default;
$rem-px-only: false !default;

// list-separator polyfill by Hugo Giraudel (https://sass-compatibility.github.io/#list_separator_function)
@function rem-separator($list) {
    @if function-exists("list-separator") == true {
        @return list-separator($list);
    }

    $test-list: ();
    @each $item in $list {
        $test-list: append($test-list, $item, space);
    }

    @return if($test-list == $list, space, comma);
}

@mixin rem-baseline($zoom: 100%) {
    font-size: $zoom / 16px * $rem-baseline;
}

@function rem-convert($to, $values...) {
    $result: ();
    $separator: rem-separator($values);

    @each $value in $values {
        @if type-of($value) == "number" and unit($value) == "rem" and $to == "px" {
            $result: append($result, $value / 1rem * $rem-baseline, $separator);
        } @else if type-of($value) == "number" and unit($value) == "px" and $to == "rem" {
            $result: append($result, $value / ($rem-baseline / 1rem), $separator);
        } @else if type-of($value) == "list" {
            $result: append($result, rem-convert($to, $value...), $separator);
        } @else {
            $result: append($result, $value, $separator);
        }
    }

    @return $result;
}


@function convertrem($size) {
    @return $size / 16px * 1rem;
}


@function rem($values...) {
    @if $rem-px-only {
        @return rem-convert(px, $values...);
    } @else {
        @return rem-convert(rem, $values...);
    }
}

@mixin rem($properties, $values...) {
    @if type-of($properties) == "map" {
        @each $property in map-keys($properties) {
            @include rem($property, map-get($properties, $property));
        }
    } @else {
        @each $property in $properties {
            @if $rem-fallback or $rem-px-only {
                #{$property}: rem-convert(px, $values...);
            }
            @if not $rem-px-only {
                #{$property}: rem-convert(rem, $values...);
            }
        }
    }
}

@mixin rj-icon-border($link-bg-color, $link-color, $link-bg-hover-color, $link-hover-color, $link-borderradius: false) {
    a {
        background-color: $link-bg-color;
        color: $link-color;
        @if $link-borderradius {
            @include rj-border-radius($link-borderradius);
        }

        &:hover {
            background-color: $link-bg-hover-color;
            color: $link-hover-color;
        }
    }
}

@mixin not-selectable {
    -moz-user-select: none;
    -ms-user-select: none;
    -webkit-user-select: none;
    -o-user-select: none;
    user-select: none;
}

$c-module-border: #000 !default;
$c-module-background: #000 !default;
$trim: 0 !default;
$c-module-span-bg-active: #000 !default;
$c-module-span-col-active: #000 !default;
$c-action: #000 !default;

@mixin tabs() {
    .toggle-tabs {
        @include rj-clearfix();
        font-family: $font-family-base;
        display: block;
        width: 100%;
        position: relative;
        border: 1px solid $c-module-border;
        background-color: $c-module-background;
        border-top-left-radius: 4px;
        border-top-right-radius: 4px;
        border-top: 0;
        margin-bottom: 0;

        li {
            float: left;
            border-right: 1px solid transparent;
            border-left: 1px solid transparent;

            > span {
                @include not-selectable;
                display: inline-block;
                padding: 0 $trim;
                height: 40px;
                line-height: 40px;
                cursor: pointer;
                position: relative;
                bottom: -1px;
                font-weight: bold;
            }
        }

        li.current {
            border-right: 1px solid $c-module-border;
            border-left: 1px solid $c-module-border;

            > span {

                background-color: $c-module-span-bg-active;
                color: $c-module-span-col-active;
                z-index: 5;
            }
        }

        li.current span,
        li:hover span {
            color: $c-action;
        }

        li:first-child {
            border-left: none;
        }

        &:after {
            @include rj-clearfix();
        }
    }

    > dl {
        width: 100%;

        > dt {
            display: none;
        }

        > dd {
            width: 100%;
            display: none;
            padding: 15px;
            border: 1px solid $c-module-border;
            border-top: 0;
        }

        > dd.current {
            display: block;
        }
    }
}

//bootstrap 3.3.6 clearfix

// Clearfix
//
// For modern browsers
// 1. The space content is one way to avoid an Opera bug when the
//    contenteditable attribute is included anywhere else in the document.
//    Otherwise it causes space to appear at the top and bottom of elements
//    that are clearfixed.
// 2. The use of `table` rather than `block` is only necessary if using
//    `:before` to contain the top-margins of child elements.
//
// Source: http://nicolasgallagher.com/micro-clearfix-hack/

@mixin rj-clearfix() {
    &:before,
    &:after {
        content: " "; // 1
        display: table; // 2
    }
    &:after {
        clear: both;
    }
}

//Bootstrap 3.3.6 Backface visibility
// Prevent browsers from flickering when using CSS 3D transforms.
// Default value is `visible`, but can be changed to `hidden`
@mixin backface-visibility($visibility) {
    -webkit-backface-visibility: $visibility;
    -moz-backface-visibility: $visibility;
    backface-visibility: $visibility;
}

// Bootstrap 3.3.6 Responsive image
//
// Keep images from scaling beyond the width of their parents.

@mixin img-responsive($display: block) {
    display: $display;
    max-width: 100%; // Part 1: Set a maximum relative to the parent
    height: auto; // Part 2: Scale the height according to the width, otherwise you get stretching
}


// Flexbox Mixins
// http://philipwalton.github.io/solved-by-flexbox/
// https://github.com/philipwalton/solved-by-flexbox
//
// Copyright (c) 2013 Brian Franco
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to
// permit persons to whom the Software is furnished to do so, subject to
// the following conditions:
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
// This is a set of mixins for those who want to mess around with flexbox
// using the native support of current browsers. For full support table
// check: http://caniuse.com/flexbox
//
// Basically this will use:
//
// * Fallback, old syntax (IE10, mobile webkit browsers - no wrapping)
// * Final standards syntax (FF, Safari, Chrome, IE11, Opera)
//
// This was inspired by:
//
// * http://dev.opera.com/articles/view/advanced-cross-browser-flexbox/
//
// With help from:
//
// * http://w3.org/tr/css3-flexbox/
// * http://the-echoplex.net/flexyboxes/
// * http://msdn.microsoft.com/en-us/library/ie/hh772069(v=vs.85).aspx
// * http://css-tricks.com/using-flexbox/
// * http://dev.opera.com/articles/view/advanced-cross-browser-flexbox/
// * https://developer.mozilla.org/en-us/docs/web/guide/css/flexible_boxes

//----------------------------------------------------------------------

// Flexbox Containers
//
// The 'flex' value causes an element to generate a block-level flex
// container box.
//
// The 'inline-flex' value causes an element to generate a inline-level
// flex container box.
//
// display: flex | inline-flex
//
// http://w3.org/tr/css3-flexbox/#flex-containers
//
// (Placeholder selectors for each type, for those who rather @extend)

@mixin flexbox {
    display: -webkit-box;
    display: -webkit-flex;
    display: -moz-flex;
    display: -ms-flexbox;
    display: flex;
}

%flexbox {
    @include flexbox;
}

//----------------------------------

@mixin inline-flex {
    display: -webkit-inline-box;
    display: -webkit-inline-flex;
    display: -moz-inline-flex;
    display: -ms-inline-flexbox;
    display: inline-flex;
}

%inline-flex {
    @include inline-flex;
}

//----------------------------------------------------------------------

// Flexbox Direction
//
// The 'flex-direction' property specifies how flex items are placed in
// the flex container, by setting the direction of the flex container's
// main axis. This determines the direction that flex items are laid out in.
//
// Values: row | row-reverse | column | column-reverse
// Default: row
//
// http://w3.org/tr/css3-flexbox/#flex-direction-property

@mixin flex-direction($value: row) {
    @if $value == row-reverse {
        -webkit-box-direction: reverse;
        -webkit-box-orient: horizontal;
    } @else if $value == column {
        -webkit-box-direction: normal;
        -webkit-box-orient: vertical;
    } @else if $value == column-reverse {
        -webkit-box-direction: reverse;
        -webkit-box-orient: vertical;
    } @else {
        -webkit-box-direction: normal;
        -webkit-box-orient: horizontal;
    }
    -webkit-flex-direction: $value;
    -moz-flex-direction: $value;
    -ms-flex-direction: $value;
    flex-direction: $value;
}

// Shorter version:
@mixin flex-dir($args...) {
    @include flex-direction($args...);
}

//----------------------------------------------------------------------

// Flexbox Wrap
//
// The 'flex-wrap' property controls whether the flex container is single-line
// or multi-line, and the direction of the cross-axis, which determines
// the direction new lines are stacked in.
//
// Values: nowrap | wrap | wrap-reverse
// Default: nowrap
//
// http://w3.org/tr/css3-flexbox/#flex-wrap-property

@mixin flex-wrap($value: nowrap) {
    // No Webkit Box fallback.
    -webkit-flex-wrap: $value;
    -moz-flex-wrap: $value;
    @if $value == nowrap {
        -ms-flex-wrap: none;
    } @else {
        -ms-flex-wrap: $value;
    }
    flex-wrap: $value;
}

//----------------------------------------------------------------------

// Flexbox Flow (shorthand)
//
// The 'flex-flow' property is a shorthand for setting the 'flex-direction'
// and 'flex-wrap' properties, which together define the flex container's
// main and cross axes.
//
// Values: <flex-direction> | <flex-wrap>
// Default: row nowrap
//
// http://w3.org/tr/css3-flexbox/#flex-flow-property

@mixin flex-flow($values: (row nowrap)) {
    // No Webkit Box fallback.
    -webkit-flex-flow: $values;
    -moz-flex-flow: $values;
    -ms-flex-flow: $values;
    flex-flow: $values;
}

//----------------------------------------------------------------------

// Flexbox Order
//
// The 'order' property controls the order in which flex items appear within
// their flex container, by assigning them to ordinal groups.
//
// Default: 0
//
// http://w3.org/tr/css3-flexbox/#order-property

@mixin order($int: 0) {
    -webkit-box-ordinal-group: $int + 1;
    -webkit-order: $int;
    -moz-order: $int;
    -ms-flex-order: $int;
    order: $int;
}

//----------------------------------------------------------------------

// Flexbox Grow
//
// The 'flex-grow' property sets the flex grow factor. Negative numbers
// are invalid.
//
// Default: 0
//
// http://w3.org/tr/css3-flexbox/#flex-grow-property

@mixin flex-grow($int: 0) {
    -webkit-box-flex: $int;
    -webkit-flex-grow: $int;
    -moz-flex-grow: $int;
    -ms-flex-positive: $int;
    flex-grow: $int;
}

//----------------------------------------------------------------------

// Flexbox Shrink
//
// The 'flex-shrink' property sets the flex shrink factor. Negative numbers
// are invalid.
//
// Default: 1
//
// http://w3.org/tr/css3-flexbox/#flex-shrink-property

@mixin flex-shrink($int: 1) {
    -webkit-flex-shrink: $int;
    -moz-flex-shrink: $int;
    -ms-flex-negative: $int;
    flex-shrink: $int;
}

//----------------------------------------------------------------------

// Flexbox Basis
//
// The 'flex-basis' property sets the flex basis. Negative lengths are invalid.
//
// Values: Like "width"
// Default: auto
//
// http://www.w3.org/TR/css3-flexbox/#flex-basis-property

@mixin flex-basis($value: auto) {
    -webkit-flex-basis: $value;
    -moz-flex-basis: $value;
    -ms-flex-preferred-size: $value;
    flex-basis: $value;
}

//----------------------------------------------------------------------

// Flexbox "Flex" (shorthand)
//
// The 'flex' property specifies the components of a flexible length: the
// flex grow factor and flex shrink factor, and the flex basis. When an
// element is a flex item, 'flex' is consulted instead of the main size
// property to determine the main size of the element. If an element is
// not a flex item, 'flex' has no effect.
//
// Values: none | <flex-grow> <flex-shrink> || <flex-basis>
// Default: See individual properties (1 1 0).
//
// http://w3.org/tr/css3-flexbox/#flex-property

@mixin flex($fg: 1, $fs: null, $fb: null) {

    // Set a variable to be used by box-flex properties
    $fg-boxflex: $fg;

    // Box-Flex only supports a flex-grow value so let's grab the
    // first item in the list and just return that.
    @if type-of($fg) == 'list' {
        $fg-boxflex: nth($fg, 1);
    }

    -webkit-box-flex: $fg-boxflex;
    -webkit-flex: $fg $fs $fb;
    -moz-box-flex: $fg-boxflex;
    -moz-flex: $fg $fs $fb;
    -ms-flex: $fg $fs $fb;
    flex: $fg $fs $fb;
}

//----------------------------------------------------------------------

// Flexbox Justify Content
//
// The 'justify-content' property aligns flex items along the main axis
// of the current line of the flex container. This is done after any flexible
// lengths and any auto margins have been resolved. Typically it helps distribute
// extra free space leftover when either all the flex items on a line are
// inflexible, or are flexible but have reached their maximum size. It also
// exerts some control over the alignment of items when they overflow the line.
//
// Note: 'space-*' values not supported in older syntaxes.
//
// Values: flex-start | flex-end | center | space-between | space-around
// Default: flex-start
//
// http://w3.org/tr/css3-flexbox/#justify-content-property

@mixin justify-content($value: flex-start) {
    @if $value == flex-start {
        -webkit-box-pack: start;
        -ms-flex-pack: start;
    } @else if $value == flex-end {
        -webkit-box-pack: end;
        -ms-flex-pack: end;
    } @else if $value == space-between {
        -webkit-box-pack: justify;
        -ms-flex-pack: justify;
    } @else if $value == space-around {
        -ms-flex-pack: distribute;
    } @else {
        -webkit-box-pack: $value;
        -ms-flex-pack: $value;
    }
    -webkit-justify-content: $value;
    -moz-justify-content: $value;
    justify-content: $value;
}

// Shorter version:
@mixin flex-just($args...) {
    @include justify-content($args...);
}


//----------------------------------------------------------------------

// Flexbox Align Items
//
// Flex items can be aligned in the cross axis of the current line of the
// flex container, similar to 'justify-content' but in the perpendicular
// direction. 'align-items' sets the default alignment for all of the flex
// container's items, including anonymous flex items. 'align-self' allows
// this default alignment to be overridden for individual flex items. (For
// anonymous flex items, 'align-self' always matches the value of 'align-items'
// on their associated flex container.)
//
// Values: flex-start | flex-end | center | baseline | stretch
// Default: stretch
//
// http://w3.org/tr/css3-flexbox/#align-items-property

@mixin align-items($value: stretch) {
    @if $value == flex-start {
        -webkit-box-align: start;
        -ms-flex-align: start;
    } @else if $value == flex-end {
        -webkit-box-align: end;
        -ms-flex-align: end;
    } @else {
        -webkit-box-align: $value;
        -ms-flex-align: $value;
    }
    -webkit-align-items: $value;
    -moz-align-items: $value;
    align-items: $value;
}

//----------------------------------

// Flexbox Align Self
//
// Values: auto | flex-start | flex-end | center | baseline | stretch
// Default: auto

@mixin align-self($value: auto) {
    // No Webkit Box Fallback.
    -webkit-align-self: $value;
    -moz-align-self: $value;
    @if $value == flex-start {
        -ms-flex-item-align: start;
    } @else if $value == flex-end {
        -ms-flex-item-align: end;
    } @else {
        -ms-flex-item-align: $value;
    }
    align-self: $value;
}

//----------------------------------------------------------------------

// Flexbox Align Content
//
// The 'align-content' property aligns a flex container's lines within the
// flex container when there is extra space in the cross-axis, similar to
// how 'justify-content' aligns individual items within the main-axis. Note,
// this property has no effect when the flexbox has only a single line.
//
// Values: flex-start | flex-end | center | space-between | space-around | stretch
// Default: stretch
//
// http://w3.org/tr/css3-flexbox/#align-content-property

@mixin align-content($value: stretch) {
    // No Webkit Box Fallback.
    -webkit-align-content: $value;
    -moz-align-content: $value;
    @if $value == flex-start {
        -ms-flex-line-pack: start;
    } @else if $value == flex-end {
        -ms-flex-line-pack: end;
    } @else {
        -ms-flex-line-pack: $value;
    }
    align-content: $value;
}

@mixin rj-font-awesome-ul($font-awesome-icon, $item-padding-left, $item-width, $item-indent: null, $item-margin-left: null, $item-margin-right: null) {
    ul {
        padding: 0;
        margin: 0;
        list-style: none;

        li {
            padding-left: $item-padding-left;

            &:before {
                @include co(content, $font-awesome-icon);
                font-family: FontAwesome;
                display: inline-block;
                width: $item-width;
                @if $item-indent == null {
                    margin-left: -$item-margin-left;
                } @else {
                    margin-left: -$item-indent;
                }
                @if $item-margin-right != null {
                    margin-right: $item-margin-right;
                }
            }
        }
    }
}


// Li Border
//
// Values: border-color, border-thickness, border-type

@mixin rj-li-border($border-color: black, $border-thickness: 1px, $border-type: solid) {
    border-bottom: $border-thickness $border-type $border-color;
    border-left: $border-thickness $border-type $border-color;
    border-right: $border-thickness $border-type $border-color;
    &:first-child {
        border-top: $border-thickness $border-type $border-color;
    }
}

@mixin rj-border($border-color: black, $border-thickness: 1px, $border-type: solid, $border-top: null, $border-right: null, $border-bottom: null, $border-left: null, $border-top-thickness: null, $border-right-thickness: null, $border-bottom-thickness: null, $border-left-thickness: null) {

    @if $border-top == null and $border-right == null and $border-bottom == null and $border-left == null {
        border: $border-thickness $border-type $border-color;
    } @else {

        @if $border-top != null {
            @if $border-top-thickness != null {
                border-top: $border-top-thickness $border-type $border-color;
            } @else {
                border-top: $border-thickness $border-type $border-color;
            }
        }
        @if $border-right != null {
            @if $border-right-thickness != null {
                border-right: $border-right-thickness $border-type $border-color;
            } @else {
                border-right: $border-right-thickness $border-type $border-color;
            }
        }
        @if $border-bottom != null {

            @if $border-bottom-thickness != null {
                border-bottom: $border-bottom-thickness $border-type $border-color;
            } @else {
                border-bottom: $border-bottom-thickness $border-type $border-color;
            }
        }
        @if $border-left != null {
            @if $border-left-thickness != null {
                border-left: $border-left-thickness $border-type $border-color;
            } @else {
                border-left: $border-thickness $border-type $border-color;
            }

        }
    }

}

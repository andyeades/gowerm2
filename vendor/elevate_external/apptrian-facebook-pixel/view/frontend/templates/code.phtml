<?php
/**
 * @category  Apptrian
 * @package   Apptrian_FacebookPixel
 * @author    Apptrian
 * @copyright Copyright (c) Apptrian (http://www.apptrian.com)
 * @license   http://www.apptrian.com/license Proprietary Software License EULA
 */

/**
 * Facebook Pixel Code block
 *
 * @var $block \Apptrian\FacebookPixel\Block\Code
 */

$data                = $block->getFacebookPixelData();
$idData              = $data['id_data'];
$action              = $data['full_action_name'];
$pageHandles         = $data['page_handles'];
$pageHandlesCategory = $data['page_handles_category'];
$pageHandlesProduct  = $data['page_handles_product'];
$pageHandlesQuote    = $data['page_handles_quote'];
$pageHandlesOrder    = $data['page_handles_order'];
$pageHandlesSearch   = $data['page_handles_search'];

$isMoveParamsOutsideContentsEnabled = $block->isMoveParamsOutsideContentsEnabled();

// bof Check if FB Pixel is allowed
if (in_array($action, $pageHandles)): ?>
<!-- Facebook Pixel Code -->
<script>
!function(f,b,e,v,n,t,s){if(f.fbq)return;n=f.fbq=function(){n.callMethod?
n.callMethod.apply(n,arguments):n.queue.push(arguments)};if(!f._fbq)f._fbq=n;
n.push=n;n.loaded=!0;n.version='2.0';n.agent='dvapptrian';n.queue=[];
t=b.createElement(e);t.async=!0;t.src=v;s=b.getElementsByTagName(e)[0];
s.parentNode.insertBefore(t,s)}(window,
document,'script','https://connect.facebook.net/en_US/fbevents.js');

    <?php
    $customerData = $block->getCustomerData();
    
    foreach ($idData as $id): ?>
        <?php if (empty($customerData)): ?>
        fbq('init', '<?= $block->escapeHtml($id) ?>');
        <?php else: ?>
        fbq('init',
            '<?= $block->escapeHtml($id) ?>',
            <?= /* @noEscape */ json_encode($customerData, JSON_PRETTY_PRINT) ?>
        );
        <?php endif; ?>
    <?php endforeach ?>

</script>
<noscript>
    <?php foreach ($idData as $id): ?>
<img height="1" width="1" style="display:none" 
alt="Facebook Pixel <?= $block->escapeHtml($id) ?>" 
src="https://www.facebook.com/tr?id=<?= $block->escapeHtml($id) ?>&ev=PageView&noscript=1"/>
    <?php endforeach; ?>
</noscript>

<script>

// Track PageView on all pages as soon as possible
fbq('track', 'PageView');

require([
    'jquery',
    'underscore'
], function ($, _) {
    
    $(function () {
    
        function moveParamsOutsideContents(data) {
    <?php if ($isMoveParamsOutsideContentsEnabled): ?>
        var isMoveParamsOutsideContentsEnabled = 1;
    <?php else: ?>
        var isMoveParamsOutsideContentsEnabled = 0;
    <?php endif; ?>
            
            if (isMoveParamsOutsideContentsEnabled) {
                if (!('contents' in data)) {
                    return data;
                }
                
                var contents       = data['contents'];
                var contentsLength = contents.length;
                
                if (contentsLength > 1) {
                    var c = 0;
                    for (i = 0; i < contentsLength; i++) {
                        var item = contents[i];
                        
                        for (var index in item) {
                            if (index == 'id' || index == 'item_price' || index == 'quantity') {
                                continue;
                            }
                            
                            // You cannot do anything with param just
                            // Remove the param from contents
                            delete data['contents'][c][index];
                        }
                        
                        c++;
                    }
                } else {
                    var item = contents[0];
                    for (var index in item) {
                        var value = item[index];
                        if (index == 'id' || index == 'item_price' || index == 'quantity') {
                            continue;
                        }
                        
                        // Set the param
                        data[index] = value;
                        // Remove the param from contents
                        delete data['contents'][0][index];
                    }
                }
                
                return data;
            } else {
                return data;
            }
        }
        
    <?php
    // bof category code
    if (in_array($action, $pageHandlesCategory)): ?>
        <?php
        $categoryData = $block->getCategoryData();
        if (!empty($categoryData)): ?>
            <?php
                $categoryEventName = $categoryData['event_name'];
                $categoryEventData = $categoryData['data'];
                
                $categoryEventNameJson = json_encode($categoryEventName, JSON_PRETTY_PRINT);
                $categoryEventDataJson = json_encode($categoryEventData, JSON_FORCE_OBJECT);
            ?>
            fbq("track",
                <?= /* @noEscape */ $categoryEventNameJson ?>,
                <?= /* @noEscape */ $categoryEventDataJson ?>
            );
        <?php endif; ?>
        <?php
    // eof category code
    // bof product code
    elseif (in_array($action, $pageHandlesProduct)): ?>
        <?php
        $productData = $block->getProductData();
        // bof product data
        if (!empty($productData)): ?>
            <?php
            
            $productEventData               = $productData['data'];
            $productEventDataWithContentIds = $productData['data_with_content_ids'];
            $contentsWithIds                = $productData['contents_with_ids'];
            $bundleProductOptionsData       = $productData['bundle_product_options_data'];
            $configurableProductOptionsData = $productData['configurable_product_options_data'];
            $productId                      = $productData['product_id'];
            $productType                    = $productData['product_type'];
            $isDetectSelectedSkuEnabled     = $block->isDetectSelectedSkuEnabled($productType);
            
            if (empty($productEventDataWithContentIds)) {
                $productEventDataForViewContent = $productEventData;
            } else {
                $productEventDataForViewContent = $productEventDataWithContentIds;
            }
        
            $productEventDataJson               = json_encode($productEventData, JSON_PRETTY_PRINT);
            $productEventDataForViewContentJson = json_encode($productEventDataForViewContent, JSON_PRETTY_PRINT);
            $contentsWithIdsJson                = json_encode($contentsWithIds, JSON_PRETTY_PRINT);
            $bundleProductOptionsDataJson       = json_encode($bundleProductOptionsData, JSON_PRETTY_PRINT);
            $configurableProductOptionsDataJson = json_encode($configurableProductOptionsData, JSON_PRETTY_PRINT);
            
            ?>

var productData = <?= /* @noEscape */ $productEventDataJson ?>;
var productDataForViewContent = <?= /* @noEscape */ $productEventDataForViewContentJson ?>;
var isDetectSelectedSkuEnabled = 0;
var taxFlag = <?= /* @noEscape */ $block->getDisplayTaxFlag() ?>;

            <?php if ($isDetectSelectedSkuEnabled): ?>
            // This is used to check whether to execute updateProductData functions
            isDetectSelectedSkuEnabled = 1;
        
                <?php if ($productType == 'bundle'): ?>
                // bof Detect product SKUs (bundle)
    
var contentsWithIds = <?= /* @noEscape */ $contentsWithIdsJson ?>;
var bundleProductOptionsData = <?= /* @noEscape */ $bundleProductOptionsDataJson ?>;
var selectors = {};
    
    // bof option loop
    for (let optionId in bundleProductOptionsData) {
        // Set all quantity input selectors
        var nameAttributeValue = 'bundle_option_qty[' + optionId + ']';
        selectors['qty' + optionId] = $('input[name="' + nameAttributeValue + '"]');
        
        // bof Quantity input handler
        selectors['qty' + optionId].on('change keyup paste click', function() {
            var idAttr        = $(this).attr('id');
            var oId           = idAttr.replace(/[^0-9]/g, '');
            var pId           = 0;
            var typeAttr      = '';
            var sIds          = 0;
            var nameAttrValue = '';
            var valueAttr     = '';
            
            // Set qty of all sibling selections
            var siblings = bundleProductOptionsData[oId];
            for (let sId in siblings) {
                pId = siblings[sId]['product_id'];
                
                if ($('#bundle-option-' + oId + '-' + sId).length) {
                    // bof radio (checkbox does not have qty input)
                    typeAttr = selectors['opt' + oId + '_' + sId].attr('type');
                    
                    if (typeAttr == 'radio') {
                        if(selectors['opt' + oId + '_' + sId].is(':checked')) {
                            // Set qty of product to current qty value
                            contentsWithIds[pId].quantity = formatQty($(this).val());
                        }
                    }
                    
                    if (typeAttr == 'hidden') {
                        // Case when there is only one radio option
                        // Set qty of product to current qty value
                        contentsWithIds[pId].quantity = formatQty($(this).val());
                    }
                    // eof radio (checkbox does not have qty input)
                } else if ($('#bundle-option-' + oId).length) {
                    // bof dropdown (multiselect does not have qty input)
                    sIds = selectors['opt' + oId + '_' + sId].parent().val();
                    
                    if (!Array.isArray(sIds) && sIds == sId) {
                        // Set qty of product to current qty value
                        contentsWithIds[pId].quantity = formatQty($(this).val());
                    }
                    // eof dropdown (multiselect does not have qty input)
                } else {
                    // Edge case when there is only one option in dropdown
                    // There is no id only name="bundle_option[X]" value="Y" type="hidden"
                    nameAttrValue = 'bundle_option[' + optionId + ']';
                    selectors['opt' + oId + '_' + sId] = $('input[name="' + nameAttrValue + '"]');
                    
                    typeAttr = selectors['opt' + oId + '_' + sId].attr('type');
                    
                    if (typeAttr == 'hidden') {
                        valueAttr = selectors['opt' + oId + '_' + sId].attr('value');
                        if (valueAttr == sId) {
                            // Set qty of product to current qty value
                            contentsWithIds[pId].quantity = formatQty($(this).val());
                        }
                    }
                }
            }
        });
        // eof Quantity input handler
        
        // bof selection loop
        for (let selectionId in bundleProductOptionsData[optionId]) {
            // Get product ID
            var pId = bundleProductOptionsData[optionId][selectionId]['product_id'];
            
            // Initialize default product qty var
            var pQty = 0;
            
            // Set qty to 0
            contentsWithIds[pId].quantity = 0;
            
            if ($('#bundle-option-' + optionId + '-' + selectionId).length) {
                // bof checkbox and radio
                
                var idAttributeValue = 'bundle-option-' + optionId + '-' + selectionId;
                selectors['opt' + optionId + '_' + selectionId] = $('#' + idAttributeValue);
                
                var typeAttr = selectors['opt' + optionId + '_' + selectionId].attr('type');
                
                // bof If anything is pre-checked
                if (selectors['opt' + optionId + '_' + selectionId].is(':checked')) {
                    // Case when there is qty input
                    if (selectors['qty' + optionId].length) {
                        // Set qty of product to current qty value
                        contentsWithIds[pId].quantity = formatQty(selectors['qty' + optionId].val());
                    } else {
                        // Case when there is no qty input
                        // Get default quantity
                        pQty = bundleProductOptionsData[optionId][selectionId]['product_quantity'];
                        // Set qty of product to defualt quantity
                        contentsWithIds[pId].quantity = pQty;
                    }
                }
                // eof If anything is pre-checked
                
                // bof Edge case when there is only one radio
                if (typeAttr == 'hidden') {
                    // Edge case only one radio option
                    // Case when there is qty input
                    if (selectors['qty' + optionId].length) {
                        // Set qty of product to current qty value
                        contentsWithIds[pId].quantity = formatQty(selectors['qty' + optionId].val());
                    } else {
                        // Case when there is no qty input
                        // Get default quantity
                        pQty = bundleProductOptionsData[optionId][selectionId]['product_quantity'];
                        // Set qty of product to defualt quantity
                        contentsWithIds[pId].quantity = pQty;
                    }
                }
                // eof Edge case when there is only one radio
                
                // bof Edge case when there is 'none' radio option
                if (typeAttr == 'radio') {
                    if ($('#bundle-option-' + optionId).length) {
                        var oProperty = 'opt' + optionId + '_none';
                        
                        if (!selectors.hasOwnProperty(oProperty)) {
                            // Set this 'none' radio option only if it is not set
                            selectors[oProperty] = $('#bundle-option-' + optionId);
                        }
                        
                        // The 'none' radio option handler
                        selectors[oProperty].on('change, click', function() {
                            var idAttr = $(this).attr('id');
                            var oId    = idAttr.replace(/[^0-9]/g, '');
                            
                            if($(this).is(':checked')) {
                                // Set qty of all siblings to 0
                                var spId = 0;
                                var siblings = bundleProductOptionsData[oId];
                                for (let s in siblings) {
                                    spId = siblings[s]['product_id'];
                                    contentsWithIds[spId].quantity = 0;
                                }
                            }
                        });
                    }
                }
                // eof Edge case when there is 'none' radio option
                
                // bof checkbox and radio handler
                selectors['opt' + optionId + '_' + selectionId].on('change, click', function() {
                    
                    var idAttr   = $(this).attr('id');
                    var typeAttr = $(this).attr('type');
                    var oId      = 0;
                    var sId      = 0;
                    var pId      = 0;
                    
                    // Get option IDs from id attribute
                    var optionAndSelectionIds = (idAttr.match(/\d+\.\d+|\d+\b|\d+(?=\w)/g) || []).map(
                        function (v) {return +v;}
                    );
                    
                    // If there are 2 ids then you can detect product ID
                    if (optionAndSelectionIds.length === 2) {
                        oId = optionAndSelectionIds[0];
                        sId = optionAndSelectionIds[1];
                        
                        pId = bundleProductOptionsData[oId][sId]['product_id'];
                        
                        // If it is checkbox
                        if (typeAttr == 'checkbox') {
                            // If it is checked
                            if($(this).is(':checked')) {
                                // Get default quantity
                                var pQty = bundleProductOptionsData[oId][sId]['product_quantity'];
                                // Set qty of product to defualt quantity
                                contentsWithIds[pId].quantity = pQty;
                            }
                            // If it is not checked
                            if(!$(this).is(':checked')) {
                                // Set qty of product to 0
                                contentsWithIds[pId].quantity = 0;
                            }
                        }
                        
                        // If it is radio
                        if (typeAttr == 'radio') {
                            if($(this).is(':checked')) {
                                // Set qty of all siblings to 0
                                var spId = 0;
                                var siblings = bundleProductOptionsData[oId];
                                for (let s in siblings) {
                                    spId = siblings[s]['product_id'];
                                    contentsWithIds[spId].quantity = 0;
                                }
                                
                                // Set qty of product to current qty value
                                contentsWithIds[pId].quantity = formatQty(selectors['qty' + oId].val());
                                
                                // bof Fix for radio not reading correct qty value
                                setTimeout(function() {
                                    // Set qty of product to current qty value
                                    contentsWithIds[pId].quantity = formatQty(selectors['qty' + oId].val());
                                }, 300);
                                // eof Fix for radio not reading correct qty value
                            }
                        }
                    }
                });
                // eof checkbox and radio handler
                
                // eof checkbox and radio
            } else if ($('#bundle-option-' + optionId).length) {
                // bof dropdown and multiselect
                
                var idAttribute = 'bundle-option-' + optionId;
                selectors['opt' + optionId + '_' + selectionId] = $(
                    '#' + idAttribute + ' option[value=' + selectionId +']'
                );
                
                // bof If anything is pre-selected
                if (selectors['opt' + optionId + '_' + selectionId].is(':selected')) {
                    // Case when there is qty input
                    if (selectors['qty' + optionId].length) {
                        // Set qty of product to current qty value
                        contentsWithIds[pId].quantity = formatQty(selectors['qty' + optionId].val());
                    } else {
                        // Case when there is no qty input
                        pQty = bundleProductOptionsData[optionId][selectionId]['product_quantity'];
                        // Set qty of product to defualt quantity
                        contentsWithIds[pId].quantity = pQty;
                    }
                }
                // eof If anything is pre-selected
                
                // bof dropdown and multiselect handler
                selectors['opt' + optionId + '_' + selectionId].parent().on(
                    'change, click', function() {
                        
                    var idAttr       = $(this).attr('id');
                    var oId          = idAttr.replace(/[^0-9]/g, '');
                    var sId          = $(this).val();
                    var pId          = 0;
                    var pQty         = 0;
                    var multipleAttr = '';
                    
                    // Set qty of all siblings to 0
                    var siblings = bundleProductOptionsData[oId];
                    var spId     = 0;
                    
                    for (let s in siblings) {
                        spId = siblings[s]['product_id'];
                        contentsWithIds[spId].quantity = 0;
                    }
                    
                    if (Array.isArray(sId)) {
                        // There is a bug when using for let loop
                        // sId sometimes gets additional indexes
                        // Use simple for loop with length and index
                        // (Happens with multiselect)
                        for (var i = 0; i < sId.length; i++) {
                            var selId = sId[i];
                            
                            // If both exist then set product selection
                            if (oId && selId) {
                                // Get product Id
                                pId = bundleProductOptionsData[oId][selId]['product_id'];
                                // Get default quantity
                                pQty = bundleProductOptionsData[oId][selId]['product_quantity'];
                                // Set qty of product to defualt quantity
                                contentsWithIds[pId].quantity = pQty;
                            } else {
                                // Edge case if there is 'none' option for multiselect
                                // Set qty of all siblings to 0
                                for (let s in siblings) {
                                    spId = siblings[s]['product_id'];
                                    contentsWithIds[spId].quantity = 0;
                                }
                                
                                multipleAttr = $(this).attr('multiple');
                                
                                if (multipleAttr != 'multiple') {
                                    // Break out of the for loop
                                    // (No need to look at other selections because 'none' is selected.)
                                    break;
                                }
                            }
                        }
                    } else {
                        // If both exist then set product selection
                        if (oId && sId) {
                            // Get product Id
                            pId = bundleProductOptionsData[oId][sId]['product_id'];
                            // Set qty of product to current qty value
                            contentsWithIds[pId].quantity = formatQty(selectors['qty' + oId].val());
                        } else {
                            // Edge case if there is 'none' option for dropdown
                            // Set qty of all siblings to 0
                            for (let s in siblings) {
                                spId = siblings[s]['product_id'];
                                contentsWithIds[spId].quantity = 0;
                            }
                        }
                    }
                });
                // eof dropdown and multiselect handler
                
                // eof dropdown and multiselect
            } else {
                // Edge case when checkbox and multiselect have only one option
                // Checkbox - There is no id only name="bundle_option[X]" value="Y" type="hidden"
                // Multiselect - There is no id only name="bundle_option[X]" value="Y" type="hidden"
                // To unify the code use name attribute selector
                var nameAttributeValue = 'bundle_option[' + optionId + ']';
                selectors['opt' + optionId + '_' + selectionId] = $('input[name="' + nameAttributeValue + '"]');
                
                var typeAttr = selectors['opt' + optionId + '_' + selectionId].attr('type');
                
                if (typeAttr == 'hidden') {
                    var valueAttr = selectors['opt' + optionId + '_' + selectionId].attr('value');
                    if (valueAttr == selectionId) {
                        // Get default quantity
                        pQty = bundleProductOptionsData[optionId][selectionId]['product_quantity'];
                        // Set qty of product to defualt quantity
                        contentsWithIds[pId].quantity = pQty;
                    }
                }
            }
        }
        // eof selection loop
    }
    // eof option loop
    
    // bof Update product data based on selected SKUs (bundle)
    function updateProductData()
    {
        if('contents' in productData) {
            // Reset contents
            productData.contents = [];
            
            // Set value to 0
            productData.value = 0;
            
            var qty = 0;
            var newValue = 0;
            var itemValue = 0;
            var itemTotal = 0;
            var globalQty = formatQty($('#qty').val());
            
            for (let productId in contentsWithIds) {
                qty = contentsWithIds[productId].quantity;
                if (qty > 0) {
                    // Adjust qty with global qty
                    if (globalQty > 1) {
                        qty = qty * globalQty;
                        contentsWithIds[productId].quantity = qty;
                    }
                    
                    // Set the item in the contents
                    productData.contents.push(contentsWithIds[productId]);
                    
                    // Increase value based on qty and price
                    itemValue = contentsWithIds[productId].item_price;
                    itemTotal = itemValue * qty;
                    // Make sure it is 2 decimal float
                    newValue += parseFloat(parseFloat(itemTotal).toFixed(2));
                }
            }
            
            // Set value to new value
            productData.value = parseFloat(parseFloat(newValue).toFixed(2));
        }
        
        // Make sure content_type is set to product
        // Dedection will return product not product_group
        if('content_type' in productData) {
            productData.content_type = 'product';
        }
    }
    // eof Update product data based on selected SKUs (bundle)
    
                // eof Detect product SKUs (bundle)
                <?php elseif ($productType == 'configurable'): ?>
                // bof Detect product SKU (configurable)
    
    var selectedPrice   = 0;
    var selectedQty     = 0;
    var selectedSku     = '';
    var selectedSkuData = null;
    var contentsWithIds = <?= /* @noEscape */ $contentsWithIdsJson ?>;
    var configurableProductId = <?= /* @noEscape */ $productId ?>;
    var $price        = $('#product-price-' + configurableProductId);
    var $priceInclTax = $('#price-including-tax-product-price-' + configurableProductId);
    
    // bof Detect selected SKU
    $('.product-options-wrapper div').on('click', function() {
        selectedProduct();
    });
    
    function selectedProduct() {
        var selectedOptions = {};
        $('div.swatch-attribute').each(function(k,v) {
            var attributeId    = $(v).attr('attribute-id');
            var optionSelected = $(v).attr('option-selected');
            if (!attributeId || !optionSelected) { return; }
            selectedOptions[attributeId] = optionSelected;
        });
        
        var productIdIndex = <?= /* @noEscape */ $configurableProductOptionsDataJson ?>;
        var foundIds = [];
        
        $.each(productIdIndex, function (productId, attributes) {
            var productIsSelected = function (attributes, selectedOptions) {
                return _.isEqual(attributes, selectedOptions);
            }
            
            if (productIsSelected(attributes, selectedOptions)) {
                foundIds.push(productId);
            } 
        });
        
        if (foundIds.length) {
            var selectedProductId = foundIds[0];
            
            if (selectedProductId in contentsWithIds) {
                selectedSkuData = contentsWithIds[selectedProductId];
                selectedSku     = contentsWithIds[selectedProductId]['id'];
                
                if (taxFlag) {
                    if ($priceInclTax.length) {
                        selectedPrice   = formatPrice($priceInclTax.text());
                    } else {
                        if ($price.length) {
                            selectedPrice   = formatPrice($price.text());
                        }
                    }
                } else {
                    if ($price.length) {
                        selectedPrice   = formatPrice($price.text());
                    }
                }
            }
        }
    }
    // eof Detect selected SKU
    
    // bof Detect selected SKU qty
    if ($('#qty').length) {
        $('#qty').on('change keyup paste click', function() {
            // Make sure it is 2 decimal float
            // (Magento allows qty to be a float not just integer)
            selectedQty = formatQty($(this).val());
        });
    }
    // eof Detect selected SKU qty
    
    // bof Update product data based on selected SKU
    function updateProductData()
    {
        if('contents' in productData) {
            // Set selected SKU data
            if (selectedSkuData !== null) {
                // Reset contents
                productData.contents = [];
                // Set selected SKU contents
                productData.contents[0] = selectedSkuData;
            }
            
            // Set selected price to item_price and value based on qty
            if (selectedPrice) {
                // Set item_price
                productData.contents[0].item_price = selectedPrice;
                
                // The value field must be calculated based on qty
                if (selectedQty > 1) {
                    var total = selectedQty * selectedPrice;
                    // Make sure it is 2 decimal float
                    productData.value = parseFloat(parseFloat(total).toFixed(2));
                } else {
                    productData.value = selectedPrice;
                }
            }
            
            if (selectedQty) {
                productData.contents[0].quantity = selectedQty;
            }
            
            if (selectedSku) {
                productData.contents[0].id = selectedSku;
            }
        }
        
        // Make sure content_type is set to product
        // Dedection will return product not product_group
        if('content_type' in productData) {
            productData.content_type = 'product';
        }
    }
    // eof Update product data based on selected SKU (configurable)
    
                // eof Detect product SKU (configurable)
                <?php elseif ($productType == 'grouped'): ?>
                // bof Detect product SKUs (grouped)
    
    var contentsWithIds    = <?= /* @noEscape */ $contentsWithIdsJson ?>;
    var selectors          = {};
    var nameAttributeValue = '';
    
    for (let productId in contentsWithIds) {
        // Set all quantities to zero to as default
        contentsWithIds[productId].quantity = 0;
        
        if (taxFlag) {
            if ($('#price-including-tax-product-price-' + productId).length) {
                selectors['price' + productId] = $('#price-including-tax-product-price-' + productId);
            } else {
                if ($('#product-price-' + productId).length) {
                    selectors['price' + productId] = $('#product-price-' + productId);
                }
            }
        } else {
            if ($('#product-price-' + productId).length) {
                selectors['price' + productId] = $('#product-price-' + productId);
            }
        }
        
        nameAttributeValue = 'super_group[' + productId + ']';
        selectors['qty' + productId] = $('input[name="' + nameAttributeValue + '"]');
        
        // Set all quantities and prices to current
        contentsWithIds[productId].quantity = selectors['qty' + productId].val();
        contentsWithIds[productId].item_price = formatPrice(selectors['price' + productId].text());
        
        // Set all selectors for change keyup paste click
        selectors['qty' + productId].on('change keyup paste click', function() {
            var nameAttr = $(this).attr('name');
            var productId = nameAttr.replace(/[^0-9]/g, '');
            
            // Make sure it is 2 decimal float
            // (Magento allows qty to be a float not just integer)
            contentsWithIds[productId].quantity = parseFloat(parseFloat($(this).val()).toFixed(2));
        });
    }
    
    // bof Update product data based on selected SKUs (grouped)
    function updateProductData()
    {
        if('contents' in productData) {
            // Reset contents
            productData.contents = [];
            
            // Set value to 0
            productData.value = 0;
            
            var qty = 0;
            var newValue = 0;
            var itemValue = 0;
            var itemTotal = 0;
            
            for (let productId in contentsWithIds) {
                qty = contentsWithIds[productId].quantity;
                if (qty > 0) {
                    // Set the item in the contents
                    productData.contents.push(contentsWithIds[productId]);
                    
                    // Increase value based on qty and price
                    itemValue = contentsWithIds[productId].item_price;
                    itemTotal = itemValue * qty;
                    // Make sure it is 2 decimal float
                    newValue += parseFloat(parseFloat(itemTotal).toFixed(2));
                }
            }
            
            // Set value to new value
            productData.value = newValue;
        }
        
        // Make sure content_type is set to product
        // Dedection will return product not product_group
        if('content_type' in productData) {
            productData.content_type = 'product';
        }
    }
    // eof Update product data based on selected SKUs (grouped)
    
                // eof Detect product SKUs (grouped)
                <?php else: ?>
                // bof Detect product SKU (downlodable, simple, virtual, etc.)
                
    var selectedPrice = 0;
    var selectedQty   = 0;
    var productId     = <?= /* @noEscape */ $productId ?>;
    var $price        = $('#product-price-' + productId);
    var $priceInclTax = $('#price-including-tax-product-price-' + productId);
    
    // bof Detect selected SKU qty
    if ($('#qty').length) {
        $('#qty').on('change keyup paste click', function() {
            // Make sure it is 2 decimal float
            // (Magento allows qty to be a float not just integer)
            selectedQty = formatQty($(this).val());
        });
    }
    // eof Detect selected SKU qty
    
    // bof Update product data based on selected SKUs (downlodable, simple, virtual, etc.)
    function updateProductData()
    {
        if('contents' in productData) {
            // Get price
            if (taxFlag) {
                if ($priceInclTax.length) {
                    selectedPrice = formatPrice($priceInclTax.text());
                } else {
                    if ($price.length) {
                        selectedPrice = formatPrice($price.text());
                    }
                }
            } else {
                if ($price.length) {
                    selectedPrice = formatPrice($price.text());
                }
            }
            
            var newValue     = 0;
            var newItemPrice = 0;
            var newQty       = 0;
            
            // If there is selected price update item_price
            if (selectedPrice > 0 ) {
                productData.contents[0].item_price = selectedPrice;
            }
            
            // If there is selected quantity update quantity
            if (selectedQty > 0 ) {
                productData.contents[0].quantity = selectedQty;
            }
            
            // Get new value
            newItemPrice = parseFloat(parseFloat(productData.contents[0].item_price).toFixed(2));
            newQty       = parseFloat(parseFloat(productData.contents[0].quantity).toFixed(2));
            newValue     = newItemPrice * newQty;
            
            // Make sure it is 2 decimal float
            productData.value = parseFloat(parseFloat(newValue).toFixed(2));
        }
        
        // Make sure content_type is set to product
        // Dedection will return product not product_group
        if('content_type' in productData) {
            productData.content_type = 'product';
        }
    }
    // eof Update product data based on selected SKU (downlodable, simple, virtual, etc.)
                
                // eof Detect product SKU (downlodable, simple, virtual, etc.)
                <?php endif; ?>
                
    // bof Utility functions used by all types of products
    function formatQty(text)
    {
        // Make sure it is 2 decimal float
        return parseFloat(parseFloat(text).toFixed(2));
    }
    
    function formatPrice(text)
    {
        var decimalSymbol = escapeRegExp('<?= /* @noEscape */ $block->getPriceDecimalSymbol(); ?>');
        
        // RegEx to remove everything except numbers and decimal sign
        // Example: /[^0-9\.]/gi
        var regEx = new RegExp('[^0-9' + decimalSymbol + ']', 'gi');
        var priceText = text.replace(regEx, '');
        
        // Replace decimal sign with decimal point
        var price = priceText.replace(decimalSymbol, '.');
        
        // Make sure it is 2 decimal float
        return parseFloat(parseFloat(price).toFixed(2));
    }
    
    function escapeRegExp(text) {
        return text.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, '\\$&');
    }
    // eof Utility functions used by all types of products

            // eof isDetectSelectedSkuEnabled    
            <?php endif; ?>

            <?php if ($block->isEventEnabled('ViewContent')):  ?>
// If needed disallowed params will be moved
productDataForViewContent = moveParamsOutsideContents(productDataForViewContent);
fbq('track', 'ViewContent', productDataForViewContent);
            <?php endif; ?>

            <?php if ($block->isEventEnabled('AddToCart')):  ?>
// Add Pixel Events to the button's click handler
$('#product-addtocart-button').on('click', function() {
    // Update product data if detection is enabled
    if (isDetectSelectedSkuEnabled) {
        updateProductData();
    }
    // The contents must have at least one item
    if (productData.contents.length) {
        // If needed disallowed params will be moved
        productData = moveParamsOutsideContents(productData);
        
        fbq('track', 'AddToCart', productData);
    }
});
            <?php endif; ?>

            <?php if ($block->isEventEnabled('AddToWishlist')):  ?>
$('.action.towishlist').on('click', function() {
    // Update product data if detection is enabled
    if (isDetectSelectedSkuEnabled) {
        updateProductData();
    }
    // The contents must have at least one item
    if (productData.contents.length) {
        // If needed disallowed params will be moved
        productData = moveParamsOutsideContents(productData);
        
        fbq('track', 'AddToWishlist', productData);
    }
});
            <?php endif; ?>
            <?php
        // eof product data
        endif; ?>
        <?php
    // eof product code
    // bof search code
    elseif (in_array($action, $pageHandlesSearch)): ?>
        <?php
        $searchData = $block->getSearchData();
        if (!empty($searchData)): ?>
            <?php
                $searchEventName = $searchData['event_name'];
                $searchEventData = $searchData['data'];
                
                $searchEventNameJson = json_encode($searchEventName, JSON_PRETTY_PRINT);
                $searchEventDataJson = json_encode($searchEventData, JSON_FORCE_OBJECT);
            ?>
            fbq("track",
                <?= /* @noEscape */ $searchEventNameJson ?>,
                <?= /* @noEscape */ $searchEventDataJson ?>
            );
        <?php endif; ?>
        <?php
    // eof search code
    // bof register code
    elseif ($action == 'customer_account_create'): ?>
        <?php
        $regData = $block->getDataForCompleteRegistrationEvent();
        if (!empty($regData)): ?>
            <?php
                $regEventName = $regData['event_name'];
                $regEventData = $regData['data'];
                
                $regEventNameJson = json_encode($regEventName, JSON_PRETTY_PRINT);
                $regEventDataJson = json_encode($regEventData, JSON_FORCE_OBJECT);
            ?>
            $('#form-validate.form-create-account button.submit').on('click', function() {
                fbq("track",
                    <?= /* @noEscape */ $regEventNameJson ?>,
                    <?= /* @noEscape */ $regEventDataJson ?>
                );
            });
        <?php endif; ?>
        <?php
    // eof register code
    // bof checkout
    elseif (in_array($action, $pageHandlesQuote)): ?>
        <?php
        $quoteData = $block->getQuoteData();
        if (!empty($quoteData)): ?>
            <?php
                $quoteEventName = $quoteData['event_name'];
                $quoteEventData = $quoteData['data'];
                
                $quoteEventNameJson = json_encode($quoteEventName, JSON_PRETTY_PRINT);
                $quoteEventDataJson = json_encode($quoteEventData, JSON_PRETTY_PRINT);
            ?>
            fbq("track",
                <?= /* @noEscape */ $quoteEventNameJson ?>,
                <?= /* @noEscape */ $quoteEventDataJson ?>
            );
        <?php endif; ?>
        <?php
    // eof checkout
    // bof checkout success
    elseif (in_array($action, $pageHandlesOrder)): ?>
        <?php
        $orderData = $block->getOrderData();
        if (!empty($orderData)): ?>
            <?php
                $orderEventName = $orderData['event_name'];
                $orderEventData = $orderData['data'];
                
                $orderEventNameJson = json_encode($orderEventName, JSON_PRETTY_PRINT);
                $orderEventDataJson = json_encode($orderEventData, JSON_PRETTY_PRINT);
            ?>
            fbq("track",
                <?= /* @noEscape */ $orderEventNameJson ?>,
                <?= /* @noEscape */ $orderEventDataJson ?>
            );
        <?php endif; ?>
        <?php
    // eof checkout success
    // bof cms_index_index or cms_page_view or
    // any other page do not add anything.
    // (PageView is already added at the top.)
    else: ?>
    <?php endif; ?>

    });
});
</script>
<!-- End Facebook Pixel Code -->

    <?php
// eof Check if FB Pixel is allowed
endif; ?>
